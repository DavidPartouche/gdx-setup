prompt0=Create a new
prompt1=project!

namePrompt=Choose the name of your project.
nameTip=Name has to be a valid file name. Can contain letters, numbers, underscores and dashes. For example: "YourGame", "your-game".
packagePrompt=Enter the name of the core package.
packageTip=Package has to be a valid Java identifier. Should contain at least one dot for Android compatibility. For example: "com.yourcompany.yourgame".
classPrompt=Enter the name of the main class.
classTip=Main class has to be a valid Java identifier. Cannot start with a number. For example: "Core", "Main", "Root", "YourGame".
destinationPrompt=Choose an empty folder for the project.
destinationTip=Project destination directory has to be empty. Click on the icon to the right to choose a folder.
androidSdkPrompt=Provide the path to your Android SDK.
sdkTip=A valid path to your Android SDK. Click on the icon to the right to choose the folder.

name=Project
package=Package
class=Main class
notEmpty={0} name cannot be empty.
nameNotValid=Project name has to contain only letters, numbers, underscores (_) and dashes (-).
classNotValid=Main class name is not a valid Java identifier.
packageNotValid=Package name is not a valid Java identifier.
notDirectory=Selected destination is not a directory.
sdkNotDirectory=Selected Android SDK path is not a directory.
notEmptyDirectory=Project destination folder has to be empty.

platforms=Platforms
platformsPrompt=Hover for more info.
androidTip=Android mobile platform. Needs Android SDK.
coreTip=Other projects have access to its code.
desktopTip=Works on every major desktop platform.
dragomeTip=Dragome WebGL platform. Not official.
iosTip=iOS mobile platform.
gwtTip=GWT WebGL platform. Supports only the Java language. Some extensions might not be compatible with GWT.
headlessTip=Headless platform. Has access to the core project. Useful for testing or setting up a server application. Can be used along with gdx-tools as a utility project.
sharedTip=Code shared between core and server projects.
serverTip=Optional server project.

languages=Languages
language=Language:
languageVersion=Version:
languageLink=Info:
languagesPrompt=Note: additional languages do not work well with the GWT platform.
closurePrompt=See "play-clj" for Closure LibGDX wrapper.
otherLanguagesPrompt=Check out this article for more info about other JVM languages.

extensions=Extensions
gdx-aiTip=Artificial intelligence utilities.
ashleyTip=Entity system.
gdx-box2dTip=2D physics engine.
box2dlightsTip=Lights system for the 2D physics engine.
gdx-bulletTip=3D physics engine. GWT-incompatible.
gdx-controllersTip=Official controllers support.
gdx-freetypeTip=Official TTF fonts support. GWT-incompatible.
gdx-toolsTip=Various LibGDX tools. Desktop and headless projects only.
gdxPayPrompt=See gdx-pay for cross-platform in-app purchasing.

thirdParty=Third-party
thirdPartyPrompt=Ordered (somewhat) alphabetically. Hover over extension names for more info.
thirdPartyWarn=These extensions are NOT provided by the official LibGDX maintainers.
thirdPartyLink=Missing your extension? Let us know!
overlap2dTip=UI and level 2D editor runtime. GWT-incompatible.
artemisOdbTip=High performance Entity-Component-System framework.
visUiTip=Flat design skin for scene2d.ui and UI toolkit.
visRuntimeTip=Runtime for VisEditor. Selecting VisRuntime will also include Artemis-odb extension.
utilsTip=Various utilities and features.
utilsBox2dTip=Various utilities and features for the Box2D extension.
facebookTip=Cross-platform support for Facebook Graph API. GWT-incompatible.
dialogsTip=Cross-platform support for native dialogs. GWT-incompatible.
inGameConsoleTip=In-game console implementation. Useful for testing, development and debugging.
jaciTip=Java Annotation Console Interface. In-game console implementation. GWT-incompatible.
jaciGwtTip=Java Annotation Console Interface. In-game console implementation. GWT-compatible, but limited - uses LibGDX reflection API.
kiwiTip=Guava-inspired utilities for LibGDX.
lmlTip=Parser of HTML-like templates that produces Scene2D widgets.
lmlVisTip=Parser of HTML-like templates that produces VisUI widgets.
autumnTip=Dependency injection mechanism with automatic component scan. Limited on iOS platform (no automatic scanner on this platform - for now).
autumnMvcTip=Model-view-controller framework on top of LibGDX, Autumn and LML.
websocketTip=Cross-platform web sockets client. Needs testing on mobile platforms.
websocketSerializationTip=Custom, efficient serialization mechanism that does not rely on reflection and works on every platform. Alternative to JSON serialization for web sockets extension.

templates=Templates
templatesPrompt=Templates generate basic sources of your project to quickly get you started.
templatesTip=Hover over radio buttons for more info.
templatesLink=Missing your favorite setup? Propose a new template!
emptyTemplateTip=Generates no sources at all.
applicationListenerTip=Generates basic application launchers. Main class implements ApplicationListener. Application initially does nothing.
applicationAdapterTip=Generates basic application launchers. Main class extends ApplicationAdapter. Application initially does nothing.
inputProcessorTip=Generates basic application launchers. Main class implements ApplicationListener and extends InputAdapter to handle input  events. Application sets itself as global InputProcessor.
gameTemplateTip=Generates basic application launchers. Main class extends Game. Application sets FirstScreen as its first view. The initial screen is empty.
scene2dTemplateTip=Generates basic application launchers. Main class extends ApplicationAdapter and creates a basic Scene2D Stage. Forces generation of GUI assets. Make sure to execute "gradle pack" command before running the application.
classicTip=Based on the previous gdx-setup application. Generates basic application launchers. Main class extends ApplicationAdapter and draws a simplistic Badlogic Games logo on the screen.
lmlTemplateTip=Uses gdx-lml GUI library. This is the Scene2D template with its GUI created using LML. Note that it shows only basic LML usage: there are even less verbose ways to include LML in your project. See other LML templates. Make sure to execute "gradle pack" command before running the application.
kiwiTemplateTip=Uses gdx-kiwi utility library. This is the "classic" template updated with some Kiwi utility classes.
visUiBasicTemplateTip=Simple example showing how to include VisUI in your project

advanced=Advanced
localePrompt=Change language:
localeWarn=Warning: reloads application.
version=Application version:
versionTip=Used as your application's version when building archives with Gradle.
gdxVersion=LibGDX version:
gdxVersionTip=Version of the official LibGDX libraries. The latest release was {0}.
gwtVersion=GWT version:
gwtVersionTip=Version of GWT libraries. Should match version used to build the GWT backend. Defaults to 2.6.1. Newer versions are NOT guaranteed to work out of the box due to API changes.
gwtPlugin=Plugin version:
gwtPluginTip=Version of the Gradle plugin for GWT applications: de.richsource.gradle.plugins:gwt-gradle-plugin.
sdkVersion=Target Android API:
sdkVersionTip=Version of the targeted Android API.
toolsVersion=Tools version:
toolsVersionTip=Version of the Android build tools.
javaVersion=Java version:
javaVersionTip=Used as source compatibility value. 1.6 is advised if you plan to target platforms other than desktop.
serverJavaVersion=Server Java version:
serverJavaVersionTip=Used as source compatibility value in headless and server applications. 1.8 is the latest stable and widely used Java version.
generateSkin=Generate skin assets
generateSkinTip=If checked, generator will create "raw" directory with some simple GUI assets and add "pack" task to root Gradle project that allows you to quickly create an atlas. Note: atlas not included, generate it with "gradle pack" task.

formValid=Your project data is correct!
generate=Generate project!

generationTitle=Generating...
generationPrompt=Generating a new project, please wait.
